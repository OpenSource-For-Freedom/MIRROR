name: Cooking robot

on:
  schedule:
    - cron: "15 12 * * 1-5"   # 12:15 UTC Monâ€“Fri
  workflow_dispatch:

permissions:
  contents: write

jobs:
  force-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (no default creds)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Configure git
        run: |
          set -euo pipefail
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Sync to latest main
        run: |
          set -euo pipefail
          git fetch origin main
          git checkout -B main origin/main
          git reset --hard origin/main

      - name: Run recipe script to update bin/bot.sh
        run: |
          set -euo pipefail
          chmod +x .github/scripts/recipe.sh
          .github/scripts/recipe.sh garlic-pasta

      - name: Show diff and commit
        run: |
          set -euo pipefail
          git status --porcelain
          git --no-pager diff -- bin/bot.sh | sed -n '1,200p' || true
          git add bin/bot.sh
          if git diff --cached --quiet; then
            echo "No changes to commit (bin/bot.sh unchanged)."; exit 0
          fi
          git commit -m "feat(recipes): update bin/bot.sh via script"

      - name: Set remote for PAT
        if: ${{ success() }}
        env:
          PAT: ${{ secrets.GIT_FORCE }}
        run: |
          set -euo pipefail
          test -n "${PAT}" || (echo "::error::GIT_FORCE secret is empty"; exit 1)
          git remote set-url origin "https://x-access-token:${PAT}@github.com/${{ github.repository }}.git"

      - name: Force push to main (porcelain)
        if: ${{ success() }}
        run: |
          set -euo pipefail
          old="$(git ls-remote --heads origin main | awk '{print $1}')"
          echo "Old remote main: $old"
          # using porcelain for clean log output
          out="$(git push --force --porcelain origin HEAD:main 2>&1)"
          echo "$out"
          if echo "$out" | grep -qiE 'rejected|GH013|protected branch|hook declined'; then
            echo "::error::Force push blocked by ruleset/branch protection"; exit 1
          fi
          new="$(git ls-remote --heads origin main | awk '{print $1}')"
          echo "New remote main: $new"
          if [ "$old" = "$new" ]; then
            echo "::error::Remote main did not change"; exit 1
          fi
